package module6;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import de.fhpotsdam.unfolding.UnfoldingMap;
import de.fhpotsdam.unfolding.data.Feature;
import de.fhpotsdam.unfolding.data.PointFeature;
import de.fhpotsdam.unfolding.data.ShapeFeature;
import de.fhpotsdam.unfolding.marker.Marker;
import de.fhpotsdam.unfolding.marker.SimpleLinesMarker;
import de.fhpotsdam.unfolding.marker.SimplePointMarker;
import de.fhpotsdam.unfolding.utils.MapUtils;
import de.fhpotsdam.unfolding.geo.Location;
import parsing.ParseFeed;
import processing.core.PApplet;
import processing.core.PGraphics;

/** An applet that shows airports (and routes)
 * on a world map.  
 * @author Adam Setters and the UC San Diego Intermediate Software Development
 * MOOC team
 *
 */
public class AirportMap extends PApplet {
	
	UnfoldingMap map;
	private List<Marker> airportList;
	List<Marker> routeList;
	
	//TODO Mouse event handler variables.
	private CommonMarker lastSelected ;
	private CommonMarker lastClicked;

	
	public void setup() {
		// setting up PAppler
		size(1500,800, OPENGL);
		
		// setting up map and default events
//		map = new UnfoldingMap(this, 50, 50, 750, 550);
		map = new UnfoldingMap(this, 250, 50, 750, 550);
		MapUtils.createDefaultEventDispatcher(this, map);
		
		// get features from airport data
		List<PointFeature> features = ParseFeed.parseAirports(this, "airports.dat");
		
		// list for markers, hashmap for quicker access when matching with routes
		airportList = new ArrayList<Marker>();
		HashMap<Integer, Location> airports = new HashMap<Integer, Location>();
		
		// create markers from features
		for(PointFeature feature : features) {

			AirportMarker m = new AirportMarker(feature);
			m.setRadius(5);
			airportList.add(m);
			
			// put airport in hashmap with OpenFlights unique id for key
			airports.put(Integer.parseInt(feature.getId()), feature.getLocation());
		
		}

		// parse route data
		List<ShapeFeature> routes = ParseFeed.parseRoutes(this, "routes.dat");
		routeList = new ArrayList<Marker>();
		for(ShapeFeature route : routes) {
			
			// get source and destination airportIds
			int source = Integer.parseInt((String)route.getProperty("source"));
			int dest = Integer.parseInt((String)route.getProperty("destination"));
			
			// get locations for airports on route
			if(airports.containsKey(source) && airports.containsKey(dest)) {
				route.addLocation(airports.get(source));
				route.addLocation(airports.get(dest));
			}
			
			SimpleLinesMarker sl = new SimpleLinesMarker(route.getLocations(), route.getProperties());
		
//			System.out.println(sl.getProperties());
			
			//UNCOMMENT IF YOU WANT TO SEE ALL ROUTES
//			routeList.add(sl);
		}

		//UNCOMMENT IF YOU WANT TO SEE ALL ROUTES
//		map.addMarkers(routeList);
		
		map.addMarkers(airportList);
		
	}
	
	public void draw() {
		background(0);
		map.draw();
		addKey();
		
	}
	
	// TODO Chart describing about the map colors
	private void addKey() {
fill(255, 250, 240);
		
		int xbase = 25;
		int ybase = 50;
		
		rect(xbase, ybase, 150, 150);
		
		fill(0);
		textAlign(LEFT, CENTER);
		textSize(20);
		text("Airport Key", xbase+25, ybase+25);
		
		//Color representation
		textSize(12);
		fill(0, 0, 255);
		text("Low Altitude", xbase+20, ybase+50);
		
		fill(0, 255, 0);
		text("Moderate altitude", xbase+20, ybase+70);
		
		fill(255, 0, 0);
		text("High altitude", xbase+20, ybase+90);
		
		
		
	}

	//TODO The mouseMoved event handler to check whether any marker is selected or not. 	
	@Override 
	public void mouseMoved(){
		if(lastSelected != null){
			lastSelected.setSelected(false);
			lastSelected = null;
		}

		selectMarkerOnHover(airportList);
	}
	
	//TODO Get the details/title about the hovered/selected marker
	private void selectMarkerOnHover(List<Marker> markers) {
		if(lastSelected != null){
			return;
		}
		for(Marker m : markers) {
			if(m.isInside(map, mouseX, mouseY)) {
				lastSelected =  (CommonMarker) m;
				m.setSelected(true);
				return;
			}
		}	
	}
	
	//TODO This event checks whether a marker is clicked or not
	@Override
	public void mouseClicked(){
		if(lastClicked != null) {
			lastClicked.setClicked(false);
			lastClicked = null;
		}
		showRoutesOfMarker(airportList);		
	}
	
	//TODO It show the routes(destination) for that particular marker(airport source) 
	//and hides the remaining markers. 
	private void showRoutesOfMarker(List<Marker> airportMarker) {
		if(lastClicked != null){
			return;
		}
		for(Marker am : airportMarker) {
			if(am.isSelected() && am.isInside(map, mouseX, mouseY)) {
				lastClicked = (CommonMarker) am;
				for(Marker hm : airportMarker) {
					if(hm != lastClicked) {
						hm.setHidden(true);
					}
				}

			}
		}
	
	}

	

}
